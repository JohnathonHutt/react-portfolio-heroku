{"version":3,"sources":["components/calculator/index.js"],"names":["buttonData","text","id","output","type","Calculator","props","state","displayText","firstVal","secondVal","currOperator","waitingForOperator","extraSubtract","handleClick","bind","clear","updateDisplay","handleNums","decimalUpdate","handleOperators","handleMain","changeSign","event","target","console","log","forEach","i","this","newVal","setState","result","String","evaluate","operator","a","Number","b","value","includes","calculatePercentage","currDisplayVal","className","Display","Buttons","React","Component","map","btn","index","key","onClick"],"mappings":"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","file":"static/js/4.cef453c1.chunk.js","sourcesContent":["//jshint esversion:6\n\nimport React from 'react';\nimport './index.css';\n\nconst buttonData = [\n  {text: \"AC\", id: \"clear\", output: null, type: \"main\"},\n  {text: \"+/-\", id: \"changeSign\", output: null, type: \"main\"},\n  {text: \"%\", id: \"getPercentage\", output: null, type: \"main\"},\n  {text: \"รท\", id: \"divide\", output: \"/\", type: \"operator\"},\n  {text: \"7\", id: \"seven\", output: 7, type: \"num\"},\n  {text: \"8\", id: \"eight\", output: 8, type: \"num\"},\n  {text: \"9\", id: \"nine\", output: 9, type: \"num\"},\n  {text: \"x\", id: \"multiply\", output: \"*\", type: \"operator\"},\n  {text: \"4\", id: \"four\", output: 4, type: \"num\"},\n  {text: \"5\", id: \"five\", output: 5, type: \"num\"},\n  {text: \"6\", id: \"six\", output: 6, type: \"num\"},\n  {text: \"-\", id: \"subtract\", output: \"-\", type: \"operator\"},\n  {text: \"1\", id: \"one\", output: 1, type: \"num\"},\n  {text: \"2\", id: \"two\", output: 2, type: \"num\"},\n  {text: \"3\", id: \"three\", output: 3, type: \"num\"},\n  {text: \"+\", id: \"add\", output: \"+\", type: \"operator\"},\n  {text: \"0\", id: \"zero\", output: 0, type: \"zero\"},\n  {text: \".\", id: \"decimal\", output: \".\", type: \"num\"},\n  {text: \"=\", id: \"equals\", output: null, type: \"operator\"}\n];\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayText: \"0\",\n      firstVal: null,\n      secondVal: null,\n      currOperator: null,\n      waitingForOperator: true,\n      extraSubtract: false\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.clear = this.clear.bind(this);\n    this.updateDisplay = this.updateDisplay.bind(this);\n    this.handleNums = this.handleNums.bind(this);\n    this.decimalUpdate = this.decimalUpdate.bind(this);\n    this.handleOperators = this.handleOperators.bind(this);\n    this.handleMain = this.handleMain.bind(this);\n    this.changeSign = this.changeSign.bind(this);\n  }\n\n  handleClick(event) {\n    let id = event.target.id;\n    console.log(id);\n    let type;\n    let text;\n    buttonData.forEach((i) => {\n      if (i.id === id) {\n        type = i.type;\n        text = i.text;\n      }\n    });\n    if (type === \"num\" || type === \"zero\") {\n      //handleNums\n      this.handleNums(text);\n    } else if (type === \"operator\") {\n      //handle operators\n      this.handleOperators(text);\n    } else if (type === \"main\") {\n      //handle main\n      this.handleMain(text);\n    }\n  }\n\n  handleNums(text) {\n    let newVal;\n    if ((this.state.firstVal && this.state.secondVal) || (this.state.firstVal && !this.state.waitingForOperator)) {\n      //block leading zeros - check if secondVal is not empty or text is not zero\n      if (this.state.secondVal || text !== \"0\") {\n        //update secondVal\n        if (text === \".\") {\n          newVal = this.decimalUpdate(this.state.secondVal);\n        } else {\n          (this.state.secondVal) ? newVal = this.state.secondVal + text : newVal = text;\n        }\n        this.setState({\n          secondVal: newVal,\n          displayText: newVal\n        });\n      }\n      console.log(this.state.secondVal);\n    } else {\n      //block leading zeros - check if secondVal is not empty or text is not zero\n      if (this.state.firstVal || text !== \"0\") {\n        //update firstVal\n        if (text === \".\") {\n          newVal = this.decimalUpdate(this.state.firstVal);\n        } else {\n          (this.state.firstVal) ? newVal = this.state.firstVal + text : newVal = text;\n        }\n        this.setState({\n          firstVal: newVal,\n          displayText: newVal\n        });\n      }\n      console.log(this.state.firstVal);\n    }\n  }\n\n  handleOperators(text) {\n    //requires evaluate method\n    console.log(\"extraSubtract:\" + this.state.extraSubtract);\n    if (text === \"=\") {\n      //use evaluate\n      //handle extra subtract\n      if (this.state.extraSubtract) {\n        let result = String(this.evaluate()*-1);\n        this.setState({\n          displayText: result,\n          firstVal: result,\n          secondVal: null,\n          currOperator: null,\n          waitingForOperator: true,\n        });\n      } else {\n        let result = String(this.evaluate());\n        this.setState({\n          displayText: result,\n          firstVal: result,\n          secondVal: null,\n          currOperator: null,\n          waitingForOperator: true,\n        });\n      }\n    } else if (this.state.firstVal && this.state.secondVal) {\n      //evaluate if operator entered after first two values\n      if (this.state.extraSubtract) {\n        let result = String(this.evaluate()*-1);\n        this.setState({\n          displayText: result,\n          firstVal: result,\n          secondVal: null,\n          currOperator: text,\n          waitingForOperator: false,\n        });\n      } else {\n        let result = String(this.evaluate());\n        this.setState({\n          displayText: result,\n          firstVal: result,\n          secondVal: null,\n          currOperator: text,\n          waitingForOperator: false,\n        });\n      }\n    } else if (!this.state.waitingForOperator && text === \"-\") {\n      //set flag to indicate \"-\" after other operator\n      console.log(\"extraSubtract set to true\");\n      this.setState({\n        extraSubtract: true\n      });\n    } else {\n      //set operator\n      this.setState({\n        currOperator: text,\n        waitingForOperator: false,\n      });\n      //if operator added after \"-\" remove flag\n      if (this.state.extraSubtract) {\n        this.setState({\n          extraSubtract: false\n        });\n      }\n    }\n  }\n\n  evaluate() {\n    let operator = this.state.currOperator;\n    let a = Number(this.state.firstVal);\n    let b = Number(this.state.secondVal);\n    switch (operator) {\n      case \"+\":\n          return a + b;\n      break;\n      case \"-\":\n          return a - b;\n      break;\n      case \"x\":\n            return a * b;\n      break;\n      case \"รท\":\n            return a / b;\n      break;\n      default: console.log(\"firstVal: \" + this.state.firstVal + \", secondVal: \" + this.state.secondVal + \" operator: \" + this.state.currOperator);\n    }\n  }\n\n  decimalUpdate(value) {\n    //input: value to add decimal\n    //output: update value\n    if (!value) {return \"0.\";}\n    value = String(value);\n    if (!value.includes(\".\")) {\n      return value + \".\";\n    }\n    return value;\n  }\n\n  handleMain(text) {\n    switch (text) {\n      case \"AC\":\n        this.clear();\n        break;\n      case \"+/-\":\n        this.changeSign();\n        break;\n      case \"%\":\n        this.calculatePercentage();\n        break;\n      default: console.log(\"See handleMain()\");\n    }\n  }\n\n  clear() {\n    //handleMain helper method\n    this.setState({\n      displayText: \"0\",\n      firstVal: null,\n      secondVal: null,\n      currOperator: null,\n      waitingForOperator: true,\n    });\n  }\n\n  changeSign() {\n    //handleMain helper method\n    console.log(\"ChangeSign was fired\");\n    if (this.state.secondVal) {\n      this.setState({\n        displayText: this.state.secondVal * -1,\n        secondVal: this.state.secondVal * -1\n      });\n    } else if (this.state.firstVal) {\n      this.setState({\n        displayText: this.state.firstVal * -1,\n        firstVal: this.state.firstVal * -1\n      });\n    }\n  }\n\n  calculatePercentage() {\n    //handleMain helper method\n    if (this.state.secondVal && this.state.firstVal) {\n      let result = String(this.evaluate() / 100);\n      this.setState({\n        displayText: result,\n        firstVal: result,\n        secondVal: null,\n        currOperator: null,\n        waitingForOperator: true,\n      });\n    } else if (this.state.firstVal) {\n      let result = this.state.firstVal / 100;\n      this.setState({\n        displayText: result,\n        firstVal: result,\n      });\n    }\n  }\n\n  updateDisplay() {\n    let currDisplayVal;\n    if (this.state.firstVal && this.state.secondVal) {\n      currDisplayVal = this.state.secondVal;\n    } else if (this.state.firstVal) {\n      currDisplayVal = this.state.firstVal;\n    } else {\n      currDisplayVal = \"0\";\n    }\n    //if 2nd value is set and 1st is null sets 0 (should never happen)\n    this.setState({\n      displayText: currDisplayVal,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"c-body\">\n        <div className=\"c-wrapper\">\n          <Display displayText={this.state.displayText}/>\n          <Buttons handleClick={this.handleClick} />\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction Display(props) {\n  return (\n    <div className=\"c-display-wrapper\">\n      <div id=\"display\" className=\"c-display\">{props.displayText}</div>\n    </div>\n  );\n}\n\nfunction Buttons(props) {\n  return (\n    <div className=\"c-buttons-wrapper\">\n      {buttonData.map((btn, index) => (\n        <button className={\"c-button c-\" + btn.type} id={btn.id} key={index} onClick={props.handleClick}>{btn.text}</button>\n      ))}\n    </div>\n  );\n}\n\nexport default Calculator;\n"],"sourceRoot":""}