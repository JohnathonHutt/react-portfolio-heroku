{"version":3,"sources":["components/home/index.js","App2.js","serviceWorker.js","index.js"],"names":["RouteLinks","props","state","linkData","title","to","img","className","this","map","i","key","src","alt","React","Component","Home","Pom","lazy","MarkdownPreviewer","Quotes","Drums","Calculator","ToDoList","App","fallback","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAqBMA,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,SAAU,CACR,CAACC,MAAO,4BAA6BC,GAAI,cAAeC,IAAK,mBAC7D,CAACF,MAAO,8BAA+BC,GAAI,YAAaC,IAAK,kBAC7D,CAACF,MAAO,kBAAmBC,GAAI,SAAUC,IAAK,mBAC9C,CAACF,MAAO,qBAAsBC,GAAI,qBAAsBC,IAAK,uBAC7D,CAACF,MAAO,yBAA0BC,GAAI,UAAWC,IAAK,qBACtD,CAACF,MAAO,aAAcC,GAAI,QAASC,IAAK,qBAT3B,E,sEAcjB,OACE,yBAAKC,UAAU,kBACZC,KAAKN,MAAMC,SAASM,KAAI,SAACC,GAAD,OACvB,kBAAC,IAAD,CAAMH,UAAU,SAASF,GAAIK,EAAEL,GAAIM,IAAK,OAASD,GAC/C,yBAAKH,UAAU,kBACb,yBAAKA,UAAU,UAAUK,IAAKF,EAAEJ,IAAKO,IAAI,iBACzC,wBAAIN,UAAU,kBAAkBG,EAAEN,iB,GArBvBU,IAAMC,WA8BhBC,EA3Cf,SAAcf,GACZ,OACE,6BACE,wBAAIM,UAAU,WAAd,mBACA,yBAAKA,UAAU,mBACb,qCACA,uBAAGA,UAAU,UAAb,gWAEF,kBAAC,EAAD,QCFAU,EAAMH,IAAMI,MAAK,kBAAM,gCACvBC,EAAoBL,IAAMI,MAAK,kBAAM,sDACrCE,EAASN,IAAMI,MAAK,kBAAM,gCAC1BG,EAAQP,IAAMI,MAAK,kBAAM,gCACzBI,EAAaR,IAAMI,MAAK,kBAAM,gCAC9BK,EAAWT,IAAMI,MAAK,kBAAM,gCAqBnBM,MAlBf,WACE,OACE,kBAAC,WAAD,CAAUC,SAAU,2CAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWZ,IACjC,kBAAC,IAAD,CAAOW,KAAK,qBAAqBC,UAAWT,IAC5C,kBAAC,IAAD,CAAOQ,KAAK,SAASC,UAAWP,IAChC,kBAAC,IAAD,CAAOM,KAAK,YAAYC,UAAWX,IACnC,kBAAC,IAAD,CAAOU,KAAK,UAAUC,UAAWR,IACjC,kBAAC,IAAD,CAAOO,KAAK,cAAcC,UAAWN,IACrC,kBAAC,IAAD,CAAOK,KAAK,QAAQC,UAAWL,QCrBrBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4519c731.chunk.js","sourcesContent":["//jshint esversion:6\n\nimport React from 'react';\nimport {\n  Link\n} from \"react-router-dom\";\nimport './index.css';\n\nfunction Home(props) {\n  return (\n    <div>\n      <h1 className=\"h-title\">React Portfolio</h1>\n      <div className=\"h-about-wrapper\">\n        <h2>About</h2>\n        <p className=\"h-desc\">This site is a collection of the projects I built for the freeCodeCamp front end libraries certificate. Each projects was built with React - then all of the projects were combined using create-react-app/React Router (with some code splitting) and the site was deployed with a Node/express backend. I also threw in a to-do list for good measure :).</p>\n      </div>\n      <RouteLinks />\n    </div>\n  )\n}\n\nclass RouteLinks extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      linkData: [\n        {title: \"Apple Flavored Calculator\", to: \"/calculator\", img: \"assets/calc.png\"},\n        {title: \"Farnsworth's Pomodoro Clock\", to: \"/pomodoro\", img: \"assets/pom.png\"},\n        {title: \"Gene's Keyboard\", to: \"/drums\", img: \"assets/drum.png\"},\n        {title: \"Markdown Previewer\", to: \"/markdownPreviewer\", img: \"assets/markdown.png\"},\n        {title: \"Random Quote Generator\", to: \"/quotes\", img: \"assets/quotes.png\"},\n        {title: \"To-Do List\", to: \"/todo\", img: \"assets/todo.png\"}\n      ]\n    };\n  }\n  render() {\n    return (\n      <div className=\"h-link-wrapper\">\n        {this.state.linkData.map((i) => (\n          <Link className=\"h-link\" to={i.to} key={\"home\" + i}>\n            <div className=\"h-project-tile\">\n              <img className=\"h-image\" src={i.img} alt=\"A calculator\" />\n              <h3 className=\"h-projectTitle\">{i.title}</h3>\n            </div>\n          </Link>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","//jshint esversion:6\n\n//App2 file using code splitting with React.lazy() and React.Suspense\n\nimport React, { Suspense } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport Home from './components/home';\n\n//Lazy Loading Routes\nconst Pom = React.lazy(() => import('./components/pomodoro'));\nconst MarkdownPreviewer = React.lazy(() => import('./components/markdownPreviewer'));\nconst Quotes = React.lazy(() => import('./components/quotes'));\nconst Drums = React.lazy(() => import('./components/drums'));\nconst Calculator = React.lazy(() => import('./components/calculator'));\nconst ToDoList = React.lazy(() => import('./components/todo'));\n\n\nfunction App() {\n  return (\n    <Suspense fallback={<h1>Loading...</h1>}>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/markdownPreviewer\" component={MarkdownPreviewer} />\n          <Route path=\"/drums\" component={Drums} />\n          <Route path=\"/pomodoro\" component={Pom} />\n          <Route path=\"/quotes\" component={Quotes} />\n          <Route path=\"/calculator\" component={Calculator} />\n          <Route path=\"/todo\" component={ToDoList} />\n        </Switch>\n      </Router>\n    </Suspense>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App2';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}